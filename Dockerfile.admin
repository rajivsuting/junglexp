FROM node:20-alpine AS base
RUN corepack enable

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy package files
COPY package.json yarn.lock ./
COPY turbo.json ./

# Copy all package.json files for workspace resolution
COPY apps/client/package.json ./apps/client/
COPY apps/admin/package.json ./apps/admin/
COPY packages/actions/package.json ./packages/actions/
COPY packages/db/package.json ./packages/db/
COPY packages/common-utils/package.json ./packages/common-utils/
COPY tooling/typescript-config/package.json ./tooling/typescript-config/

# Install all dependencies (disable PnP for Docker compatibility)
RUN yarn config set nodeLinker node-modules && \
    yarn install

# Build dependencies first
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy all source code
COPY . .

# Build the admin app specifically
RUN yarn turbo build --filter=admin

# Production image
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the standalone output
COPY --from=builder --chown=nextjs:nodejs /app/apps/admin/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/admin/.next/static ./apps/admin/.next/static
COPY --from=builder --chown=nextjs:nodejs /app/apps/admin/public ./apps/admin/public

USER nextjs

EXPOSE 3000

ENV PORT=3000

CMD ["node", "apps/admin/server.js"]
